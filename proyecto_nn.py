from matplotlib import pyplot as plt
import numpy as np
'''


____
1
283,70
1
308,63
1
253,60
1
281,61
1
303,54
1
279,54
1
343,55
1
335,49
1
290,34
1
327,34
1
299,32
1
287,22
1
169,15
1
0,0
1
287,5
____
2
0,0
2
263,66
2
325,58
2
266,57
2
290,45
2
0,0
2
275,34
2
0,0
2
0,0
2
338,19
2
292,14
2
335,10
2
276,9
2
357,9
2
333,5
2
290,6
2
0,0
____
3
278,74
3
237,67
3
291,63
3
242,43
3
0,0
3
270,34
3
268,29
3
247,22
3
284,9
3
314,7
3
259,7
3
271,6
____
4
0,0
4
229,63
4
0,0
4
0,0
4
226,53
4
0,0
4
280,42
4
226,37
4
282,4
4
237,0
____
5
0,0
5
239,72
5
294,64
5
268,61
5
247,57
5
290,56
5
0,0
5
285,36
5
267,36
5
276,30
5
269,23
5
231,25
5
0,0
5
266,13
5
286,12
5
225,12
5
240,10
5
0,0
5
229,1
____
6
254,70
6
303,67
6
327,61
6
352,51
6
249,52
6
0,0
6
245,20
6
0,0
6
297,16
6
278,11
6
294,9
6
289,2
____
7
0,0
7
241,74
7
0,0
7
259,48
7
260,32
7
244,24
7
258,20
7
255,12
7
254,2
____
8
0,0
8
0,0
8
209,71
8
214,64
8
263,60
8
0,0
8
187,55
8
243,49
8
198,42
8
209,41
8
186,39
8
191,39
8
245,34
8
189,30
8
0,0
8
187,24
8
177,20
8
264,10
8
0,0
8
174,8
8
0,0
8
247,1
8
229,1
____
9
0,0
9
302,72
9
0,0
9
278,69
9
356,68
9
205,70
9
341,50
9
366,49
9
342,44
9
216,43
9
363,43
9
251,41
9
289,35
9
353,36
9
314,33
9
236,34
9
303,30
9
280,30
9
255,30
9
0,0
9
352,25
9
211,22
9
351,19
9
388,16
9
223,14
9
301,11
9
0,0
9
210,12
9
288,7
9
0,0
9
0,0
9
220,5
9
0,0
9
0,0
____
10
209,71
10
311,69
10
258,71
10
215,56
10
0,0
10
0,0
10
224,53
10
          383,54
10
339,51
10
325,50
10
201,49
10
363,46
10
202,44
10
293,42
10
277,43
10
243,36
10
313,30
10
374,27
10
353,20
10
365,19
10
314,11
10
0,0
10
310,4
10
304,4
10
221,4
____
11
200,74
11
349,68
11
378,69
11
254,59
11
248,57
11
236,56
11
241,53
11
205,52
11
197,49
11
232,46
11
314,46
11
322,42
11
265,31
11
320,25
11
246,15
11
268,13
11
0,0
11
212,3
11
263,1
____
12
386,0
12
201,0



ex2.jpg
data 1
1[282,0] 
2[383,54]
3[356,144]
4[263,212]
5[278,315] 
6[276,410]
7[290,718]
8[282,915]

data 2
1[282,0] 
2[383,54] 
3[278,145] 
4[241,302] 
5[297,320] 
6[226,493] 
7[268,561] 
8[290,653]
9[282,9915]


data 3
1[[282,0],
2[311,69], 
3[243,201], 
4[254,230],
5[245,324], 
6[247,554],
7[325,666],
8[290,718], 
9[282,915]]

data 4
1[[282,0],
2[302,148],
3[243,201],
4[259,276],
5[226,493],
6[268,561],
7[325,666],
8[279,738],
9[282,915]]
 
data 5
1[[282,0],
2[258,248],
3[297,320],
4[285,416],
5[226,509],
6[325,666],
7[343,739],
8[277,808],
9[282,915]]

data 6
1[[282,0],
2[278,145],
3[241,302],
4[245,324],
5[294,444],
6[226,493],
7[284,541],
8[303,738],
9[282,915]]

data 7
1[[282,0],
2[224,53],
3[205,146],
4[327,365],
5[226,493],
6[268,561],
7[303,738],
8[338,807],
9[282,915]]

especial
[[282 215 278 209 259 297 247 280 291 275 283 282]
 [  0  56 145 193 276 320 437 498 595 642 754 915]]




[[209,71],
[311,69],
[258,71],
[215,56],
[224,53],
[383,54],
[339,51],
[325,50],
[201,49],
[363,46],
[202,44],
[293,42],
[277,43],
[243,36],
[313,30],
[374,27],
[353,20],
[365,19],
[314,11],
[310,4],
[304,4],
[221,4]]

SORTED

[[201, 49], [202, 44], [209, 71], [215, 56], [221, 4], [224, 53], [243, 36], [258, 71], [277, 43], [293, 42], [304, 4], [310, 4], [311, 69], [313, 30], [314, 11], [325, 50], [339, 51], [353, 20], [363, 46], [365, 19], [374, 27], [383, 54]]
____
'''
data = [[304, 4, 1],
        [310, 4, 1],
        [311, 69, 1],
        [313, 30, 1],
        [314, 11, 1],
        [325, 50, 1],
        [339, 51, 1],
        [353, 20, 1],
        [363, 46, 1],
        [365, 19, 1],
        [374, 27, 1],
        [383, 54, 1],
        [282, 20, 0],
        [280, 77, 0],
        [278, 33, 0],
        [270, 88, 0],
        [268, 53, 0],
        [290, 45, 0],
        [320, 34,0],
        [323, 44,0],
        [330, 45,0]]

valor_random = [298,32]

def sigmoid(x):
    return 1/(1+np.exp(-x))


def sigmoid_p(x):
    return sigmoid(x) * (1-sigmoid(x))



def train():
    w1 = np.random.randn()
    w2 = np.random.randn()
    b = np.random.randn()

    iterations = 10000
    learning_rate = 0.1
    costs = [] 

    for i in range(iterations):
        ri = np.random.randint(len(data))
        point = data[ri]

        z = point[0] * w1 + point[1] * w2 + b
        pred = sigmoid(z)

        target = point[2]

        # cost for current random point
        cost = np.square(pred - target)
     
        dcost_dpred = 2 * (pred - target)
        dpred_dz = sigmoid_p(z)

        dz_dw1 = point[0]
        dz_dw2 = point[1]
        dz_db = 1

        dcost_dz = dcost_dpred * dpred_dz

        dcost_dw1 = dcost_dz * dz_dw1
        dcost_dw2 = dcost_dz * dz_dw2
        dcost_db = dcost_dz * dz_db

        w1 = w1 - learning_rate * dcost_dw1
        w2 = w2 - learning_rate * dcost_dw2
        b = b - learning_rate * dcost_db

    return costs, w1, w2, b


costs, w1, w2, b = train()
print("valor w1:", w1)
print("valor w2:", w2)
print("valor b:", b)
cero=valor_random[0]
uno=valor_random[1]
z = w1 * cero + w2 * uno + b
pred = sigmoid(z)

print(pred)
